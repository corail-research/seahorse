window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "seahorse", "modulename": "seahorse", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples", "modulename": "seahorse.examples", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone", "modulename": "seahorse.examples.abalone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.infinity", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "infinity", "kind": "variable", "doc": "<p></p>\n", "default_value": "inf"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class implementing the Alpha-Beta algorithm for the Abalone game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  piece type of the player</li>\n</ul>\n", "bases": "seahorse.player.player.Player"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.__init__", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the AlphaPlayerAbalone class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str, optional):</strong>  The name of the player. Defaults to \"bob\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.piece_type", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.piece_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.get_piece_type", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.get_piece_type", "kind": "function", "doc": "<p>Gets the type of the player's game piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The type of the player's game piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.cutoff_depth", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.cutoff_depth", "kind": "function", "doc": "<p>Checks if the given depth exceeds the cutoff.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>d (int):</strong>  The current depth.</li>\n<li><strong>cutoff (int):</strong>  The cutoff depth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the cutoff depth is exceeded, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.heuristic", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.heuristic", "kind": "function", "doc": "<p>Computes the heuristic value for the given game state.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The heuristic value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.max_value", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.max_value", "kind": "function", "doc": "<p>Computes the maximum value for the current player in the Alpha-Beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>alpha (int):</strong>  The alpha value.</li>\n<li><strong>beta (int):</strong>  The beta value.</li>\n<li><strong>depth (int):</strong>  The current depth.</li>\n<li><strong>cutoff (int):</strong>  The cutoff depth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, Action]: The maximum value and the corresponding action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.min_value", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.min_value", "kind": "function", "doc": "<p>Computes the minimum value for the opponent player in the Alpha-Beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>alpha (int):</strong>  The alpha value.</li>\n<li><strong>beta (int):</strong>  The beta value.</li>\n<li><strong>depth (int):</strong>  The current depth.</li>\n<li><strong>cutoff (int):</strong>  The cutoff depth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, Action]: The minimum value and the corresponding action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.alpha_player_abalone.MyPlayer.compute_action", "modulename": "seahorse.examples.abalone.alpha_player_abalone", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Solves the game by implementing the logic of the player using the Alpha-Beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">_</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.board_abalone", "modulename": "seahorse.examples.abalone.board_abalone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.board_abalone.BoardAbalone", "modulename": "seahorse.examples.abalone.board_abalone", "qualname": "BoardAbalone", "kind": "class", "doc": "<p>A class representing an Abalone board.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>env (dict[tuple[int], Piece]):</strong>  The environment dictionary composed of pieces.</li>\n<li><strong>dimensions (list[int]):</strong>  The dimensions of the board.</li>\n</ul>\n", "bases": "seahorse.game.game_layout.board.Board"}, {"fullname": "seahorse.examples.abalone.board_abalone.BoardAbalone.__init__", "modulename": "seahorse.examples.abalone.board_abalone", "qualname": "BoardAbalone.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the Board class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (dict[tuple[int], Piece]):</strong>  The environment dictionary composed of pieces.</li>\n<li><strong>dim (list[int]):</strong>  The dimensions of the board.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_layout</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Piece</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "seahorse.examples.abalone.board_abalone.BoardAbalone.nice_repr", "modulename": "seahorse.examples.abalone.board_abalone", "qualname": "BoardAbalone.nice_repr", "kind": "function", "doc": "<p>Return a nice representation of the board.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The nice representation of the board.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.board_abalone.BoardAbalone.to_json", "modulename": "seahorse.examples.abalone.board_abalone", "qualname": "BoardAbalone.to_json", "kind": "function", "doc": "<p>Convert the board to a JSON-compatible dictionary.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: The JSON representation of the board.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone", "modulename": "seahorse.examples.abalone.game_state_abalone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone", "kind": "class", "doc": "<p>A class representing the state of an Abalone game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>score (list[float]):</strong>  Scores of the state for each player.</li>\n<li><strong>next_player (Player):</strong>  Next player to play.</li>\n<li><strong>players (list[Player]):</strong>  List of players.</li>\n<li><strong>rep (Representation):</strong>  Representation of the game.</li>\n</ul>\n", "bases": "seahorse.game.game_state.GameState"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.__init__", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the GameState class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, Any]):</strong>  The scores of the state for each player.</li>\n<li><strong>next_player (Player):</strong>  The next player to play.</li>\n<li><strong>players (List[Player]):</strong>  The list of players.</li>\n<li><strong>rep (Representation):</strong>  The representation of the game.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">next_player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rep</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">abalone</span><span class=\"o\">.</span><span class=\"n\">board_abalone</span><span class=\"o\">.</span><span class=\"n\">BoardAbalone</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.max_score", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.max_score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.max_step", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.max_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.step", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.get_step", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.get_step", "kind": "function", "doc": "<p>Return the current step of the game.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The current step of the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.is_done", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.is_done", "kind": "function", "doc": "<p>Check if the game is finished.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the game is finished, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.detect_conflict", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.detect_conflict", "kind": "function", "doc": "<p>Detect conflicts on the board.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>i (int):</strong>  Row index of the starting position.</li>\n<li><strong>j (int):</strong>  Column index of the starting position.</li>\n<li><strong>n_i (int):</strong>  Row direction of movement.</li>\n<li><strong>n_j (int):</strong>  Column direction of movement.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Piece]: List of pieces involved in the conflict.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_j</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_layout</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Piece</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.in_hexa", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.in_hexa", "kind": "function", "doc": "<p>Check if a given index is within the hexagonal game board.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index:</strong>  The index to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the index is within the hexagonal game board, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.get_player_id", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.get_player_id", "kind": "function", "doc": "<p>Get the player with the given ID.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pid:</strong>  The ID of the player.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Player: The player with the given ID.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pid</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.generator", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.generator", "kind": "function", "doc": "<p>Generate possible actions.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Set[Action]: List of possible future representations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.generate_possible_actions", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.generate_possible_actions", "kind": "function", "doc": "<p>Generate possible actions for the current game state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Action]: List of possible actions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.game_state_abalone.GameStateAbalone.compute_scores", "modulename": "seahorse.examples.abalone.game_state_abalone", "qualname": "GameStateAbalone.compute_scores", "kind": "function", "doc": "<p>Compute the score of each player in a list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id_add (int):</strong>  The ID of the player to add the score for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[int, float]: A dictionary with player ID as the key and score as the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_add</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.master_abalone", "modulename": "seahorse.examples.abalone.master_abalone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.master_abalone.MasterAbalone", "modulename": "seahorse.examples.abalone.master_abalone", "qualname": "MasterAbalone", "kind": "class", "doc": "<p>Master to play the game Abalone</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the game</li>\n<li><strong>initial_game_state (GameState):</strong>  Initial state of the game</li>\n<li><strong>current_game_state (GameState):</strong>  Current state of the game</li>\n<li><strong>players_iterator (Iterable):</strong>  An iterable for the players_iterator, ordered according to the playing order.\nIf a list is provided, a cyclic iterator is automatically built</li>\n<li><strong>log_file (str):</strong>  Name of the log file</li>\n</ul>\n", "bases": "seahorse.game.master.GameMaster"}, {"fullname": "seahorse.examples.abalone.master_abalone.MasterAbalone.__init__", "modulename": "seahorse.examples.abalone.master_abalone", "qualname": "MasterAbalone.__init__", "kind": "function", "doc": "<p>Initialize the MasterAbalone instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the game</li>\n<li><strong>initial_game_state (GameState):</strong>  Initial state of the game</li>\n<li><strong>players_iterator (Iterable):</strong>  An iterable for the players_iterator, ordered according to the playing order.\nIf a list is provided, a cyclic iterator is automatically built</li>\n<li><strong>log_file (str):</strong>  Name of the log file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">initial_game_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">players_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "seahorse.examples.abalone.master_abalone.MasterAbalone.compute_winner", "modulename": "seahorse.examples.abalone.master_abalone", "qualname": "MasterAbalone.compute_winner", "kind": "function", "doc": "<p>Computes the winners of the game based on the scores.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, float]):</strong>  Score for each player</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Iterable[Player]: List of the players who won the game</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.random_player_abalone", "modulename": "seahorse.examples.abalone.random_player_abalone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.random_player_abalone.MyPlayer", "modulename": "seahorse.examples.abalone.random_player_abalone", "qualname": "MyPlayer", "kind": "class", "doc": "<p>Player class for Abalone game that makes random moves.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  piece type of the player</li>\n</ul>\n", "bases": "seahorse.player.player.Player"}, {"fullname": "seahorse.examples.abalone.random_player_abalone.MyPlayer.__init__", "modulename": "seahorse.examples.abalone.random_player_abalone", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initialize the RandomPlayerAbalone instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  Type of the player's game piece</li>\n<li><strong>name (str, optional):</strong>  Name of the player (default is \"bob\")</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.abalone.random_player_abalone.MyPlayer.piece_type", "modulename": "seahorse.examples.abalone.random_player_abalone", "qualname": "MyPlayer.piece_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.abalone.random_player_abalone.MyPlayer.get_piece_type", "modulename": "seahorse.examples.abalone.random_player_abalone", "qualname": "MyPlayer.get_piece_type", "kind": "function", "doc": "<p>Get the type of the player's game piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Piece type string representing the type of the piece</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.abalone.random_player_abalone.MyPlayer.compute_action", "modulename": "seahorse.examples.abalone.random_player_abalone", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Function to implement the logic of the player (here random selection of a feasible solution).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  Current game state representation</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: Randomly selected feasible action</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam", "modulename": "seahorse.examples.avalam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.infinity", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "infinity", "kind": "variable", "doc": "<p></p>\n", "default_value": "inf"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer", "kind": "class", "doc": "<p>Player class for Avalam game that uses the alpha-beta algorithm for move selection.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  piece type of the player</li>\n</ul>\n", "bases": "seahorse.player.player.Player"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.__init__", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initialize the AlphaPlayerAvalam instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  Type of the player's game piece</li>\n<li><strong>name (str, optional):</strong>  Name of the player (default is \"bob\")</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.piece_type", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.piece_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.get_piece_type", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.get_piece_type", "kind": "function", "doc": "<p>Get the type of the player's game piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Piece type string representing the type of the piece</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.cutoff_depth", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.cutoff_depth", "kind": "function", "doc": "<p>Check if the depth has reached the cutoff value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>d (int):</strong>  Current depth</li>\n<li><strong>cutoff (int):</strong>  Cutoff depth</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the depth is greater than the cutoff, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.heuristic", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.heuristic", "kind": "function", "doc": "<p>Evaluate the current state using a heuristic function.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  Current game state representation</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Heuristic value of the current state</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.max_value", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.max_value", "kind": "function", "doc": "<p>Perform the max-value step of the alpha-beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  Current game state representation</li>\n<li><strong>alpha (int):</strong>  Alpha value for pruning</li>\n<li><strong>beta (int):</strong>  Beta value for pruning</li>\n<li><strong>depth (int):</strong>  Current depth in the search tree</li>\n<li><strong>cutoff (int):</strong>  Cutoff depth</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[float, Action]: Tuple containing the max-value and the corresponding action</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.min_value", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.min_value", "kind": "function", "doc": "<p>Perform the min-value step of the alpha-beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  Current game state representation</li>\n<li><strong>alpha (int):</strong>  Alpha value for pruning</li>\n<li><strong>beta (int):</strong>  Beta value for pruning</li>\n<li><strong>depth (int):</strong>  Current depth in the search tree</li>\n<li><strong>cutoff (int):</strong>  Cutoff depth</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[float, Action]: Tuple containing the min-value and the corresponding action</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.alpha_player_avalam.MyPlayer.compute_action", "modulename": "seahorse.examples.avalam.alpha_player_avalam", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Function to implement the logic of the player (alpha-beta algorithm).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  Current game state representation</li>\n<li><strong>**_:</strong>  Additional keyword arguments</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: Selected action based on the alpha-beta algorithm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">_</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.board_avalam", "modulename": "seahorse.examples.avalam.board_avalam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.board_avalam.PieceAvalam", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "PieceAvalam", "kind": "class", "doc": "<p>Piece class for the Avalam game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  Type of the piece</li>\n<li><strong>owner (Player):</strong>  Owner of the piece</li>\n<li><strong>value (int):</strong>  Value of the piece</li>\n</ul>\n", "bases": "seahorse.game.game_layout.board.Piece"}, {"fullname": "seahorse.examples.avalam.board_avalam.PieceAvalam.__init__", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "PieceAvalam.__init__", "kind": "function", "doc": "<p>Initialize the PieceAvalam instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  Type of the piece</li>\n<li><strong>owner (Player):</strong>  Owner of the piece</li>\n<li><strong>value (int):</strong>  Value of the piece</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "seahorse.examples.avalam.board_avalam.PieceAvalam.value", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "PieceAvalam.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.board_avalam.PieceAvalam.get_value", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "PieceAvalam.get_value", "kind": "function", "doc": "<p>Get the value of the piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: Value of the piece</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.board_avalam.BoardAvalam", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "BoardAvalam", "kind": "class", "doc": "<p>Board class for the Avalam game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>env (dict[tuple[int], PieceAvalam]):</strong>  Environment dictionary composed of pieces</li>\n<li><strong>dimensions (list[int]):</strong>  Dimensions of the board</li>\n</ul>\n", "bases": "seahorse.game.game_layout.board.Board"}, {"fullname": "seahorse.examples.avalam.board_avalam.BoardAvalam.__init__", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "BoardAvalam.__init__", "kind": "function", "doc": "<p>Initialize the BoardAvalam instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (dict[tuple[int], PieceAvalam]):</strong>  Environment dictionary composed of pieces</li>\n<li><strong>dim (list[int]):</strong>  Dimensions of the board</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">avalam</span><span class=\"o\">.</span><span class=\"n\">board_avalam</span><span class=\"o\">.</span><span class=\"n\">PieceAvalam</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "seahorse.examples.avalam.board_avalam.BoardAvalam.to_json", "modulename": "seahorse.examples.avalam.board_avalam", "qualname": "BoardAvalam.to_json", "kind": "function", "doc": "<p>Convert the board to a JSON representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: JSON representation of the board</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.game_state_avalam", "modulename": "seahorse.examples.avalam.game_state_avalam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.game_state_avalam.GameStateAvalam", "modulename": "seahorse.examples.avalam.game_state_avalam", "qualname": "GameStateAvalam", "kind": "class", "doc": "<p>GameState class for the Avalam game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>scores (Dict):</strong>  Scores of the state for each player</li>\n<li><strong>next_player (Player):</strong>  Next player to play</li>\n<li><strong>players (List[Player]):</strong>  List of players</li>\n<li><strong>rep (BoardAvalam):</strong>  Representation of the game</li>\n<li><strong>max_tower (int):</strong>  Maximum tower height</li>\n</ul>\n", "bases": "seahorse.game.game_state.GameState"}, {"fullname": "seahorse.examples.avalam.game_state_avalam.GameStateAvalam.__init__", "modulename": "seahorse.examples.avalam.game_state_avalam", "qualname": "GameStateAvalam.__init__", "kind": "function", "doc": "<p>Initialize the GameStateAvalam instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict):</strong>  Scores of the state for each player</li>\n<li><strong>next_player (Player):</strong>  Next player to play</li>\n<li><strong>players (List[Player]):</strong>  List of players</li>\n<li><strong>rep (BoardAvalam):</strong>  Representation of the game</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">next_player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rep</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">avalam</span><span class=\"o\">.</span><span class=\"n\">board_avalam</span><span class=\"o\">.</span><span class=\"n\">BoardAvalam</span></span>)</span>"}, {"fullname": "seahorse.examples.avalam.game_state_avalam.GameStateAvalam.max_tower", "modulename": "seahorse.examples.avalam.game_state_avalam", "qualname": "GameStateAvalam.max_tower", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.game_state_avalam.GameStateAvalam.is_done", "modulename": "seahorse.examples.avalam.game_state_avalam", "qualname": "GameStateAvalam.is_done", "kind": "function", "doc": "<p>Check if the game is finished.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the game is finished, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.game_state_avalam.GameStateAvalam.generate_possible_actions", "modulename": "seahorse.examples.avalam.game_state_avalam", "qualname": "GameStateAvalam.generate_possible_actions", "kind": "function", "doc": "<p>Generate possible actions.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Set[Action]: Set of possible actions</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.game_state_avalam.GameStateAvalam.compute_scores", "modulename": "seahorse.examples.avalam.game_state_avalam", "qualname": "GameStateAvalam.compute_scores", "kind": "function", "doc": "<p>Compute the score of each player in a dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id_sub:</strong>  ID of the player</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict[int, float]: Dictionary with player ID as key and score as value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_sub</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.master_avalam", "modulename": "seahorse.examples.avalam.master_avalam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.master_avalam.MasterAvalam", "modulename": "seahorse.examples.avalam.master_avalam", "qualname": "MasterAvalam", "kind": "class", "doc": "<p>Master to play the game Avalam.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the game.</li>\n<li><strong>initial_game_state (GameState):</strong>  Initial state of the game.</li>\n<li><strong>current_game_state (GameState):</strong>  Current state of the game.</li>\n<li><strong>players_iterator (Iterable):</strong>  An iterable for the players_iterator, ordered according to the playing order.\nIf a list is provided, a cyclic iterator is automatically built.</li>\n<li><strong>log_file (str):</strong>  Name of the log file.</li>\n</ul>\n", "bases": "seahorse.game.master.GameMaster"}, {"fullname": "seahorse.examples.avalam.master_avalam.MasterAvalam.__init__", "modulename": "seahorse.examples.avalam.master_avalam", "qualname": "MasterAvalam.__init__", "kind": "function", "doc": "<p>Initialize the MasterAvalam instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the game.</li>\n<li><strong>initial_game_state (GameState):</strong>  Initial state of the game.</li>\n<li><strong>players_iterator (Iterable[Player]):</strong>  An iterable for the players_iterator, ordered according to the playing order.\nIf a list is provided, a cyclic iterator is automatically built.</li>\n<li><strong>log_file (str):</strong>  Name of the log file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">initial_game_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">players_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "seahorse.examples.avalam.master_avalam.MasterAvalam.compute_winner", "modulename": "seahorse.examples.avalam.master_avalam", "qualname": "MasterAvalam.compute_winner", "kind": "function", "doc": "<p>Computes the winners of the game based on the scores.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, float]):</strong>  Score for each player.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  Raised if the method is not implemented.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Iterable[Player]: List of the player(s) who won the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.random_player_avalam", "modulename": "seahorse.examples.avalam.random_player_avalam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.random_player_avalam.MyPlayer", "modulename": "seahorse.examples.avalam.random_player_avalam", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class that makes random moves in the game Avalam.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  piece type of the player</li>\n</ul>\n", "bases": "seahorse.player.player.Player"}, {"fullname": "seahorse.examples.avalam.random_player_avalam.MyPlayer.__init__", "modulename": "seahorse.examples.avalam.random_player_avalam", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initialize the RandomPlayerAvalam instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's piece.</li>\n<li><strong>name (str, optional):</strong>  The name of the player. Defaults to \"bob\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.avalam.random_player_avalam.MyPlayer.piece_type", "modulename": "seahorse.examples.avalam.random_player_avalam", "qualname": "MyPlayer.piece_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.avalam.random_player_avalam.MyPlayer.get_piece_type", "modulename": "seahorse.examples.avalam.random_player_avalam", "qualname": "MyPlayer.get_piece_type", "kind": "function", "doc": "<p>Get the type of the player's piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The type of the piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.avalam.random_player_avalam.MyPlayer.compute_action", "modulename": "seahorse.examples.avalam.random_player_avalam", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implement the logic of the player by randomly selecting a feasible solution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The chosen action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala", "modulename": "seahorse.examples.mancala", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.mancala.board_mancala", "modulename": "seahorse.examples.mancala.board_mancala", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.mancala.board_mancala.PieceMancala", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "PieceMancala", "kind": "class", "doc": "<p>A class representing a piece in the game of Mancala.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The value associated with the piece.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The value of the piece.</li>\n</ul>\n", "bases": "seahorse.game.game_layout.board.Piece"}, {"fullname": "seahorse.examples.mancala.board_mancala.PieceMancala.__init__", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "PieceMancala.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the PieceMancala class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The value of the piece.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "seahorse.examples.mancala.board_mancala.PieceMancala.value", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "PieceMancala.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.mancala.board_mancala.PieceMancala.remove", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "PieceMancala.remove", "kind": "function", "doc": "<p>Removes the piece from the game and returns its value.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The value of the piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.board_mancala.PieceMancala.increment", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "PieceMancala.increment", "kind": "function", "doc": "<p>Increments the value of the piece.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>val (int):</strong>  The value to increment by.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.board_mancala.PieceMancala.get_value", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "PieceMancala.get_value", "kind": "function", "doc": "<p>Returns the value of the piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The value of the piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.board_mancala.BoardMancala", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "BoardMancala", "kind": "class", "doc": "<p>Represents the Mancala board.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>env (dict):</strong>  Environment dictionary composed of pieces.</li>\n<li><strong>dimensions (tuple):</strong>  Dimensions of the board.</li>\n</ul>\n", "bases": "seahorse.game.game_layout.board.Board"}, {"fullname": "seahorse.examples.mancala.board_mancala.BoardMancala.__init__", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "BoardMancala.__init__", "kind": "function", "doc": "<p>Initializes the BoardMancala object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (dict, optional):</strong>  Environment dictionary representing the board. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "seahorse.examples.mancala.board_mancala.BoardMancala.copy", "modulename": "seahorse.examples.mancala.board_mancala", "qualname": "BoardMancala.copy", "kind": "function", "doc": "<p>Creates a copy of the board.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>BoardMancala: Copied BoardMancala object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">mancala</span><span class=\"o\">.</span><span class=\"n\">board_mancala</span><span class=\"o\">.</span><span class=\"n\">BoardMancala</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala", "modulename": "seahorse.examples.mancala.game_state_mancala", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.BOARD_SIZE", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "BOARD_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala", "kind": "class", "doc": "<p>Represents the game state of Mancala.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>scores (Dict):</strong>  Dictionary containing the scores of the game for each player.</li>\n<li><strong>next_player (Player):</strong>  Player object representing the next player.</li>\n<li><strong>players (List[Player]):</strong>  List of Player objects representing the players.</li>\n<li><strong>rep (BoardMancala):</strong>  BoardMancala object representing the game board.</li>\n</ul>\n", "bases": "seahorse.game.game_state.GameState"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.__init__", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.__init__", "kind": "function", "doc": "<p>Initializes the GameStateMancala object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict):</strong>  Dictionary containing the scores of the game for each player.</li>\n<li><strong>next_player (Player):</strong>  Player object representing the next player.</li>\n<li><strong>players (List[Player]):</strong>  List of Player objects representing the players.</li>\n<li><strong>rep (BoardMancala):</strong>  BoardMancala object representing the game board.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">next_player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rep</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">mancala</span><span class=\"o\">.</span><span class=\"n\">board_mancala</span><span class=\"o\">.</span><span class=\"n\">BoardMancala</span></span>)</span>"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.is_done", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.is_done", "kind": "function", "doc": "<p>Checks if the game is done.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the game is done, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.generate_possible_actions", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.generate_possible_actions", "kind": "function", "doc": "<p>Generates all possible actions from the current game state.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ActionNotPermittedError:</strong>  If the action is not permitted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Set[Action]: Set of possible actions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.generate_action", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.generate_action", "kind": "function", "doc": "<p>Generates an action from a pool.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pool (Tuple):</strong>  The pool to play.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ActionNotPermittedError:</strong>  If the action is not permitted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: Generated action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.get_next_pool", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.get_next_pool", "kind": "function", "doc": "<p>Gets the next pool to play.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pool (Tuple):</strong>  The current pool being played.</li>\n<li><strong>player (int):</strong>  The player to play.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the pool is not valid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple: The next pool to play.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pool</span>, </span><span class=\"param\"><span class=\"n\">player</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.compute_scores", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.compute_scores", "kind": "function", "doc": "<p>Computes the scores of the game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (Dict):</strong>  The next environment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict: The scores of the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.replay", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.replay", "kind": "function", "doc": "<p>Determines if the player can replay.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>player (Player):</strong>  The player.</li>\n<li><strong>current_rep (Representation):</strong>  The current representation of the game.</li>\n<li><strong>next_rep (Representation):</strong>  The next representation of the game.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the player can replay.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">current_rep</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">next_rep</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.compute_next_player", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.compute_next_player", "kind": "function", "doc": "<p>Gets the next player. If the player can replay, returns the same player. Otherwise, returns the next player in the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>player (Player):</strong>  The current player.</li>\n<li><strong>current_rep (Representation, optional):</strong>  The current representation of the game. Defaults to None.</li>\n<li><strong>next_rep (Representation, optional):</strong>  The next representation of the game. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Player: The next player.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">current_rep</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">next_rep</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.game_state_mancala.GameStateMancala.copy", "modulename": "seahorse.examples.mancala.game_state_mancala", "qualname": "GameStateMancala.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">mancala</span><span class=\"o\">.</span><span class=\"n\">game_state_mancala</span><span class=\"o\">.</span><span class=\"n\">GameStateMancala</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.master_mancala", "modulename": "seahorse.examples.mancala.master_mancala", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.mancala.master_mancala.MasterMancala", "modulename": "seahorse.examples.mancala.master_mancala", "qualname": "MasterMancala", "kind": "class", "doc": "<p>A class representing the game master for Mancala.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the game master.</li>\n<li><strong>initial_game_state (GameState):</strong>  The initial game state.</li>\n<li><strong>players_iterator (Iterable[Player]):</strong>  An iterable of players.</li>\n<li><strong>log_file (str):</strong>  The log file.</li>\n</ul>\n", "bases": "seahorse.game.master.GameMaster"}, {"fullname": "seahorse.examples.mancala.master_mancala.MasterMancala.__init__", "modulename": "seahorse.examples.mancala.master_mancala", "qualname": "MasterMancala.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the MasterMancala class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the game master.</li>\n<li><strong>initial_game_state (GameState):</strong>  The initial game state.</li>\n<li><strong>players_iterator (Iterable[Player]):</strong>  An iterable of players.</li>\n<li><strong>log_file (str):</strong>  The log file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">initial_game_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">players_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "seahorse.examples.mancala.master_mancala.MasterMancala.compute_winner", "modulename": "seahorse.examples.mancala.master_mancala", "qualname": "MasterMancala.compute_winner", "kind": "function", "doc": "<p>Computes the winners of the game based on the scores.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, float]):</strong>  The score for each player.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Iterable[Player]: A list of the player(s) who won the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.mancala.player_mancala", "modulename": "seahorse.examples.mancala.player_mancala", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.mancala.player_mancala.MyPlayer", "modulename": "seahorse.examples.mancala.player_mancala", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A class representing a Mancala player.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "bases": "seahorse.player.player.Player"}, {"fullname": "seahorse.examples.mancala.player_mancala.MyPlayer.__init__", "modulename": "seahorse.examples.mancala.player_mancala", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the PlayerMancala class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.mancala.player_mancala.MyPlayer.compute_action", "modulename": "seahorse.examples.mancala.player_mancala", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Solves the game by implementing the logic of the player (random selection of a feasible solution).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameStateMancala):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">mancala</span><span class=\"o\">.</span><span class=\"n\">game_state_mancala</span><span class=\"o\">.</span><span class=\"n\">GameStateMancala</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe", "modulename": "seahorse.examples.tictactoe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.infinity", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "infinity", "kind": "variable", "doc": "<p></p>\n", "default_value": "inf"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A class representing an Alpha Player for the Tic-Tac-Toe game.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the AlphaPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of game piece assigned to the player.</li>\n<li><strong>name (str, optional):</strong>  The name of the player. Defaults to \"bob\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer.cutoff_depth", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer.cutoff_depth", "kind": "function", "doc": "<p>Checks if the depth has reached the cutoff depth.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>d (int):</strong>  The current depth.</li>\n<li><strong>cutoff (int):</strong>  The cutoff depth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the depth has reached the cutoff depth, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer.heuristic", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer.heuristic", "kind": "function", "doc": "<p>Calculates the heuristic value for the given game state.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The heuristic value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer.max_value", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer.max_value", "kind": "function", "doc": "<p>Performs the max-value step of the alpha-beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>alpha (int):</strong>  The alpha value.</li>\n<li><strong>beta (int):</strong>  The beta value.</li>\n<li><strong>depth (int):</strong>  The current depth.</li>\n<li><strong>cutoff (int):</strong>  The cutoff depth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[float, Action]: The value and the corresponding action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer.min_value", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer.min_value", "kind": "function", "doc": "<p>Performs the min-value step of the alpha-beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>alpha (int):</strong>  The alpha value.</li>\n<li><strong>beta (int):</strong>  The beta value.</li>\n<li><strong>depth (int):</strong>  The current depth.</li>\n<li><strong>cutoff (int):</strong>  The cutoff depth.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[float, Action]: The value and the corresponding action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.alpha_player_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.alpha_player_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Solves the game using the alpha-beta algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**_:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">_</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.board_tictac", "modulename": "seahorse.examples.tictactoe.board_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.board_tictac.BoardTictac", "modulename": "seahorse.examples.tictactoe.board_tictac", "qualname": "BoardTictac", "kind": "class", "doc": "<p>A class representing a Tic-Tac-Toe game board.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>env (dict[Tuple[int], Piece]):</strong>  The environment dictionary composed of pieces.</li>\n<li><strong>dimensions (list[int]):</strong>  The dimensions of the board.</li>\n</ul>\n", "bases": "seahorse.game.game_layout.board.Board"}, {"fullname": "seahorse.examples.tictactoe.board_tictac.BoardTictac.__init__", "modulename": "seahorse.examples.tictactoe.board_tictac", "qualname": "BoardTictac.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the BoardTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (dict[Tuple[int], Piece]):</strong>  The environment dictionary composed of pieces.</li>\n<li><strong>dim (list[int]):</strong>  The dimensions of the board.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_layout</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Piece</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.board_tictac.BoardTictac.to_json", "modulename": "seahorse.examples.tictactoe.board_tictac", "qualname": "BoardTictac.to_json", "kind": "function", "doc": "<p>Converts the board to a JSON object.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: The JSON representation of the board.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac", "kind": "class", "doc": "<p>A class representing the game state for Tic-Tac-Toe.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>score (List[float]):</strong>  The scores of the state for each player.</li>\n<li><strong>next_player (Player):</strong>  The next player to play.</li>\n<li><strong>players (List[Player]):</strong>  The list of players.</li>\n<li><strong>rep (BoardTictac):</strong>  The representation of the game.</li>\n</ul>\n", "bases": "seahorse.game.game_state.GameState"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.__init__", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the GameStateTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict):</strong>  The scores of the state for each player.</li>\n<li><strong>next_player (Player):</strong>  The next player to play.</li>\n<li><strong>players (List[Player]):</strong>  The list of players.</li>\n<li><strong>rep (BoardTictac):</strong>  The representation of the game.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">next_player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rep</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">tictactoe</span><span class=\"o\">.</span><span class=\"n\">board_tictac</span><span class=\"o\">.</span><span class=\"n\">BoardTictac</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.num_pieces", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.num_pieces", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.get_num_pieces", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.get_num_pieces", "kind": "function", "doc": "<p>Returns the number of pieces implied in the game.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>num_pieces (int): The number of pieces implied in the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.is_done", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.is_done", "kind": "function", "doc": "<p>Checks if the game is finished.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the game is finished, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.generate_possible_actions", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.generate_possible_actions", "kind": "function", "doc": "<p>Generates possible actions.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Set[Action]: A set of possible future representations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.compute_scores", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.compute_scores", "kind": "function", "doc": "<p>Computes the score of each player in a list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>representation (BoardTictac):</strong>  The current representation of the game state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict[int, float]: A dictionary with player ID as keys and scores as values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">representation</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"o\">.</span><span class=\"n\">Representation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.game_state_tictac.GameStateTictac.has_won", "modulename": "seahorse.examples.tictactoe.game_state_tictac", "qualname": "GameStateTictac.has_won", "kind": "function", "doc": "<p>Checks if a player has won the game.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if a player has won, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.master_tictac", "modulename": "seahorse.examples.tictactoe.master_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.master_tictac.MasterTictac", "modulename": "seahorse.examples.tictactoe.master_tictac", "qualname": "MasterTictac", "kind": "class", "doc": "<p>A game master for playing Tic Tac Toe.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the game.</li>\n<li><strong>initial_game_state (GameState):</strong>  The initial state of the game.</li>\n<li><strong>current_game_state (GameState):</strong>  The current state of the game.</li>\n<li><strong>players_iterator (Iterable):</strong>  An iterable for the players_iterator, ordered according\nto the playing order. If a list is provided,\na cyclic iterator is automatically built.</li>\n<li><strong>log_file (str):</strong>  The name of the log file.</li>\n</ul>\n", "bases": "seahorse.game.master.GameMaster"}, {"fullname": "seahorse.examples.tictactoe.master_tictac.MasterTictac.__init__", "modulename": "seahorse.examples.tictactoe.master_tictac", "qualname": "MasterTictac.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the MasterTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the game.</li>\n<li><strong>initial_game_state (GameState):</strong>  The initial state of the game.</li>\n<li><strong>players_iterator (Iterable[Player]):</strong>  An iterable for the players_iterator, ordered according\nto the playing order.</li>\n<li><strong>log_file (str):</strong>  The name of the log file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">initial_game_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">players_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.master_tictac.MasterTictac.compute_winner", "modulename": "seahorse.examples.tictactoe.master_tictac", "qualname": "MasterTictac.compute_winner", "kind": "function", "doc": "<p>Computes the winners of the game based on the scores.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, float]):</strong>  The score for each player.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Iterable[Player]: A list of the players who won the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.player_tictac", "modulename": "seahorse.examples.tictactoe.player_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.player_tictac.PlayerTictac", "modulename": "seahorse.examples.tictactoe.player_tictac", "qualname": "PlayerTictac", "kind": "class", "doc": "<p>A player class for Tic Tac Toe.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  the type of the player.</li>\n</ul>\n", "bases": "seahorse.player.player.Player"}, {"fullname": "seahorse.examples.tictactoe.player_tictac.PlayerTictac.__init__", "modulename": "seahorse.examples.tictactoe.player_tictac", "qualname": "PlayerTictac.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the PlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.player_tictac.PlayerTictac.piece_type", "modulename": "seahorse.examples.tictactoe.player_tictac", "qualname": "PlayerTictac.piece_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.player_tictac.PlayerTictac.get_piece_type", "modulename": "seahorse.examples.tictactoe.player_tictac", "qualname": "PlayerTictac.get_piece_type", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The type of the player's game piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_2_tictac", "modulename": "seahorse.examples.tictactoe.random_player_2_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_2_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_2_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_2_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_2_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_2_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_2_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_3_tictac", "modulename": "seahorse.examples.tictactoe.random_player_3_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_3_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_3_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_3_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_3_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_3_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_3_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_4_tictac", "modulename": "seahorse.examples.tictactoe.random_player_4_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_4_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_4_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_4_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_4_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_4_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_4_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_5_tictac", "modulename": "seahorse.examples.tictactoe.random_player_5_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_5_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_5_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_5_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_5_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_5_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_5_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_6_tictac", "modulename": "seahorse.examples.tictactoe.random_player_6_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_6_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_6_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_6_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_6_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_6_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_6_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_7_tictac", "modulename": "seahorse.examples.tictactoe.random_player_7_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_7_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_7_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_7_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_7_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_7_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_7_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.examples.tictactoe.random_player_tictac", "modulename": "seahorse.examples.tictactoe.random_player_tictac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.examples.tictactoe.random_player_tictac.MyPlayer", "modulename": "seahorse.examples.tictactoe.random_player_tictac", "qualname": "MyPlayer", "kind": "class", "doc": "<p>A player class for Tic Tac Toe that selects moves randomly.</p>\n", "bases": "seahorse.examples.tictactoe.player_tictac.PlayerTictac"}, {"fullname": "seahorse.examples.tictactoe.random_player_tictac.MyPlayer.__init__", "modulename": "seahorse.examples.tictactoe.random_player_tictac", "qualname": "MyPlayer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RandomPlayerTictac class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the player's game piece.</li>\n<li><strong>name (str):</strong>  The name of the player.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span></span>)</span>"}, {"fullname": "seahorse.examples.tictactoe.random_player_tictac.MyPlayer.compute_action", "modulename": "seahorse.examples.tictactoe.random_player_tictac", "qualname": "MyPlayer.compute_action", "kind": "function", "doc": "<p>Implements the logic of the player by randomly selecting a feasible move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The selected action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.execution", "modulename": "seahorse.execution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.execution.exec_multi", "modulename": "seahorse.execution.exec_multi", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti", "kind": "class", "doc": "<p>A class to execute multiple rounds and matches of a game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>main_file (str):</strong>  The main file to execute.</li>\n<li><strong>num_player (int):</strong>  The number of players in each match.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>main_file (str):</strong>  The main file to execute.</li>\n</ul>\n"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.__init__", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the ExecMulti class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>main_file (str):</strong>  The main file to execute.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.main_file", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.main_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.num_player", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.num_player", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.run_round", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.run_round", "kind": "function", "doc": "<p>Runs a single round of the game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folder_players (str):</strong>  The folder containing the player files.</li>\n<li><strong>name_player1 (str):</strong>  The name of player 1.</li>\n<li><strong>name_player2 (str):</strong>  The name of player 2.</li>\n<li><strong>port (int):</strong>  The port number for communication.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">folder_players</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name_player1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name_player2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.run_multiple_rounds", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.run_multiple_rounds", "kind": "function", "doc": "<p>Runs multiple rounds of the game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rounds (int):</strong>  The number of rounds to run.</li>\n<li><strong>nb_process (int):</strong>  The number of processes to use.</li>\n<li><strong>swap (bool):</strong>  Whether to swap the players in alternate rounds.</li>\n<li><strong>folder_players (str):</strong>  The folder containing the player files.</li>\n<li><strong>name_player1 (str):</strong>  The name of player 1.</li>\n<li><strong>name_player2 (str):</strong>  The name of player 2.</li>\n<li><strong>port (int):</strong>  The port number for communication. Default is 8080.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rounds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">nb_process</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">swap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">folder_players</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name_player1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name_player2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.run_match", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.run_match", "kind": "function", "doc": "<p>Runs a single match of the game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rounds_by_match (int):</strong>  The number of rounds per match.</li>\n<li><strong>swap (bool):</strong>  Whether to swap the players in alternate matches.</li>\n<li><strong>folder_players (str):</strong>  The folder containing the player files.</li>\n<li><strong>name_player1 (str):</strong>  The name of player 1.</li>\n<li><strong>name_player2 (str):</strong>  The name of player 2.</li>\n<li><strong>port (int):</strong>  The port number for communication.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rounds_by_match</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">swap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">folder_players</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name_player1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name_player2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.execution.exec_multi.ExecMulti.run_multiple_matches", "modulename": "seahorse.execution.exec_multi", "qualname": "ExecMulti.run_multiple_matches", "kind": "function", "doc": "<p>Runs multiple matches of the game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rounds_by_match (int):</strong>  The number of rounds per match.</li>\n<li><strong>nb_process (int):</strong>  The number of processes to use.</li>\n<li><strong>swap (bool):</strong>  Whether to swap the players in alternate matches.</li>\n<li><strong>folder_players (str):</strong>  The folder containing the player files.</li>\n<li><strong>csv_file (str):</strong>  The CSV file containing the names of the players.</li>\n<li><strong>sep (str):</strong>  The delimiter used in the CSV file. Default is \",\".</li>\n<li><strong>port (int):</strong>  The starting port number for communication. Default is 8080.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rounds_by_match</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">nb_process</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">swap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">folder_players</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">csv_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game", "modulename": "seahorse.game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.action", "modulename": "seahorse.game.action", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.action.Action", "modulename": "seahorse.game.action", "qualname": "Action", "kind": "class", "doc": "<p>A class representing an action in the game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>past_gs (GameState):</strong>  The past game state.</li>\n<li><strong>new_gs (GameState):</strong>  The new game state.</li>\n</ul>\n"}, {"fullname": "seahorse.game.action.Action.__init__", "modulename": "seahorse.game.action", "qualname": "Action.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the Action class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>past_gs (GameState):</strong>  The past game state.</li>\n<li><strong>new_gs (GameState):</strong>  The new game state.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">past_gs</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">new_gs</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span>)</span>"}, {"fullname": "seahorse.game.action.Action.past_gs", "modulename": "seahorse.game.action", "qualname": "Action.past_gs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.action.Action.new_gs", "modulename": "seahorse.game.action", "qualname": "Action.new_gs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.action.Action.get_current_game_state", "modulename": "seahorse.game.action", "qualname": "Action.get_current_game_state", "kind": "function", "doc": "<p>Returns the past game state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GameState: The past game state.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.action.Action.get_next_game_state", "modulename": "seahorse.game.action", "qualname": "Action.get_next_game_state", "kind": "function", "doc": "<p>Returns the new game state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GameState: The new game state.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_layout", "modulename": "seahorse.game.game_layout", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_layout.board", "modulename": "seahorse.game.game_layout.board", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_layout.board.Piece", "modulename": "seahorse.game.game_layout.board", "qualname": "Piece", "kind": "class", "doc": "<p>A class representing a piece in the game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the piece.</li>\n<li><strong>owner_id (int):</strong>  The ID of the player who possesses the piece.</li>\n</ul>\n"}, {"fullname": "seahorse.game.game_layout.board.Piece.__init__", "modulename": "seahorse.game.game_layout.board", "qualname": "Piece.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the Piece class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>piece_type (str):</strong>  The type of the piece.</li>\n<li><strong>owner (Player):</strong>  The player who possesses the piece.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">piece_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span></span>)</span>"}, {"fullname": "seahorse.game.game_layout.board.Piece.piece_type", "modulename": "seahorse.game.game_layout.board", "qualname": "Piece.piece_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_layout.board.Piece.get_type", "modulename": "seahorse.game.game_layout.board", "qualname": "Piece.get_type", "kind": "function", "doc": "<p>Gets the type of the piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The type of the piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_layout.board.Piece.get_owner_id", "modulename": "seahorse.game.game_layout.board", "qualname": "Piece.get_owner_id", "kind": "function", "doc": "<p>Gets the ID of the owner of the piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The ID of the owner.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_layout.board.Piece.copy", "modulename": "seahorse.game.game_layout.board", "qualname": "Piece.copy", "kind": "function", "doc": "<p>Creates a copy of the piece.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Piece: A copy of the piece.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_layout</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Piece</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_layout.board.Board", "modulename": "seahorse.game.game_layout.board", "qualname": "Board", "kind": "class", "doc": "<p>A class representing the game board.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>env (dict[tuple[int], Piece]):</strong>  The environment dictionary composed of pieces.</li>\n<li><strong>dimensions (list[int]):</strong>  The dimensions of the board.</li>\n</ul>\n", "bases": "seahorse.game.representation.Representation"}, {"fullname": "seahorse.game.game_layout.board.Board.__init__", "modulename": "seahorse.game.game_layout.board", "qualname": "Board.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the Board class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (dict[tuple[int], Piece]):</strong>  The environment dictionary composed of pieces.</li>\n<li><strong>dim (list[int]):</strong>  The dimensions of the board.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_layout</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Piece</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dim</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "seahorse.game.game_layout.board.Board.dimensions", "modulename": "seahorse.game.game_layout.board", "qualname": "Board.dimensions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_layout.board.Board.get_dimensions", "modulename": "seahorse.game.game_layout.board", "qualname": "Board.get_dimensions", "kind": "function", "doc": "<p>Gets the dimensions of the board.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: The list of dimensions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_layout.board.Board.get_pieces_player", "modulename": "seahorse.game.game_layout.board", "qualname": "Board.get_pieces_player", "kind": "function", "doc": "<p>Gets the pieces owned by a specific player.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>owner (Player):</strong>  The player specified.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, list[Piece]]: The number of pieces owned by the player and the list of their pieces.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">owner</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_layout</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Piece</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state", "modulename": "seahorse.game.game_state", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_state.GameState", "modulename": "seahorse.game.game_state", "qualname": "GameState", "kind": "class", "doc": "<p>A class representing the game state.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, Any]):</strong>  The scores of the state for each player.</li>\n<li><strong>next_player (Player):</strong>  The next player to play.</li>\n<li><strong>players (List[Player]):</strong>  The list of players.</li>\n<li><strong>rep (Representation):</strong>  The representation of the game.</li>\n</ul>\n"}, {"fullname": "seahorse.game.game_state.GameState.__init__", "modulename": "seahorse.game.game_state", "qualname": "GameState.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the GameState class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, Any]):</strong>  The scores of the state for each player.</li>\n<li><strong>next_player (Player):</strong>  The next player to play.</li>\n<li><strong>players (List[Player]):</strong>  The list of players.</li>\n<li><strong>rep (Representation):</strong>  The representation of the game.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">next_player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>,</span><span class=\"param\">\t<span class=\"n\">players</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rep</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"o\">.</span><span class=\"n\">Representation</span></span>)</span>"}, {"fullname": "seahorse.game.game_state.GameState.scores", "modulename": "seahorse.game.game_state", "qualname": "GameState.scores", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_state.GameState.next_player", "modulename": "seahorse.game.game_state", "qualname": "GameState.next_player", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_state.GameState.players", "modulename": "seahorse.game.game_state", "qualname": "GameState.players", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_state.GameState.rep", "modulename": "seahorse.game.game_state", "qualname": "GameState.rep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.game_state.GameState.get_player_score", "modulename": "seahorse.game.game_state", "qualname": "GameState.get_player_score", "kind": "function", "doc": "<p>Gets a player's score.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>player (Player):</strong>  The player.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The score.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.get_next_player", "modulename": "seahorse.game.game_state", "qualname": "GameState.get_next_player", "kind": "function", "doc": "<p>Returns the next player.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Player: The next player.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.compute_next_player", "modulename": "seahorse.game.game_state", "qualname": "GameState.compute_next_player", "kind": "function", "doc": "<p>Computes the next player.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Player: The next player.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.get_scores", "modulename": "seahorse.game.game_state", "qualname": "GameState.get_scores", "kind": "function", "doc": "<p>Returns the scores.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict: The player ID to score mapping.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.get_players", "modulename": "seahorse.game.game_state", "qualname": "GameState.get_players", "kind": "function", "doc": "<p>Returns the list of players.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Player]: The list of players.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.get_rep", "modulename": "seahorse.game.game_state", "qualname": "GameState.get_rep", "kind": "function", "doc": "<p>Returns the representation of the game.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Representation: The game representation.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"o\">.</span><span class=\"n\">Representation</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.get_possible_actions", "modulename": "seahorse.game.game_state", "qualname": "GameState.get_possible_actions", "kind": "function", "doc": "<p>Returns a copy of the possible actions from this state.\nThe first call triggers the <code>generate_possible_actions</code> method.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>FrozenSet[Action]: The possible actions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">FrozenSet</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.check_action", "modulename": "seahorse.game.game_state", "qualname": "GameState.check_action", "kind": "function", "doc": "<p>Checks if an action is feasible.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>action (Action):</strong>  The action to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the action is feasible, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.generate_possible_actions", "modulename": "seahorse.game.game_state", "qualname": "GameState.generate_possible_actions", "kind": "function", "doc": "<p>Generates a set of all possible actions from this game state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Set[Action]: A set of possible actions.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.compute_scores", "modulename": "seahorse.game.game_state", "qualname": "GameState.compute_scores", "kind": "function", "doc": "<p>Computes the scores of each player.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>next_rep (Representation):</strong>  The next representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict[int, Any]: The scores of each player.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">next_rep</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"o\">.</span><span class=\"n\">Representation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.game_state.GameState.is_done", "modulename": "seahorse.game.game_state", "qualname": "GameState.is_done", "kind": "function", "doc": "<p>Indicates if the current GameState is final.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the state is final, False otherwise.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream", "modulename": "seahorse.game.io_stream", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.io_stream.EventSlave", "modulename": "seahorse.game.io_stream", "qualname": "EventSlave", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.io_stream.EventSlave.activate", "modulename": "seahorse.game.io_stream", "qualname": "EventSlave.activate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream.EventSlave.wait_for_next_play", "modulename": "seahorse.game.io_stream", "qualname": "EventSlave.wait_for_next_play", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.io_stream.EventSlave.listen", "modulename": "seahorse.game.io_stream", "qualname": "EventSlave.listen", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">master_address</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">keep_alive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.io_stream.event_emitting", "modulename": "seahorse.game.io_stream", "qualname": "event_emitting", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream.remote_action", "modulename": "seahorse.game.io_stream", "qualname": "remote_action", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream.EventMaster", "modulename": "seahorse.game.io_stream", "qualname": "EventMaster", "kind": "class", "doc": "<p>Singleton for emitting events</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  when trying to initialize more than once</li>\n</ul>\n"}, {"fullname": "seahorse.game.io_stream.EventMaster.__init__", "modulename": "seahorse.game.io_stream", "qualname": "EventMaster.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_clients</span>, </span><span class=\"param\"><span class=\"n\">port</span></span>)</span>"}, {"fullname": "seahorse.game.io_stream.EventMaster.get_instance", "modulename": "seahorse.game.io_stream", "qualname": "EventMaster.get_instance", "kind": "function", "doc": "<p>Gets the instance object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_clients (int, optional):</strong>  the number of clients the instance is supposed to be listening, <em>ignored</em> if already initialized. Defaults to 1.</li>\n<li><strong>port (int, optional):</strong>  the port to use. Defaults to 8080.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_clients</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">io_stream</span><span class=\"o\">.</span><span class=\"n\">EventMaster</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream.EventMaster.wait_for_identified_client", "modulename": "seahorse.game.io_stream", "qualname": "EventMaster.wait_for_identified_client", "kind": "function", "doc": "<p>Waits for an identified client (a player typically)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  the name of the remote client</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: the client sid</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.io_stream.EventMaster.start", "modulename": "seahorse.game.io_stream", "qualname": "EventMaster.start", "kind": "function", "doc": "<p>Starts an emitting sequence and runs a tasks that embeds\ncalls to <code>EventMaster.__instance.sio.emit()</code></p>\n\n<p>The emitting sequence waits for a number of socketIO connections\nspecified in <code>EventMaster.__instance.n_clients</code>.</p>\n\n<p>If <code>EventMaster.__instance.n_clients==0</code> emits events\nin the void.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>task (Callable[[None],None]):</strong>  task calling <code>EventMaster.sio.emit()</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">listeners</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">io_stream</span><span class=\"o\">.</span><span class=\"n\">EventSlave</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream_copy", "modulename": "seahorse.game.io_stream_copy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.io_stream_copy.EventSlave", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventSlave", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.io_stream_copy.EventSlave.activate", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventSlave.activate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream_copy.EventSlave.wait_for_next_play", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventSlave.wait_for_next_play", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.io_stream_copy.EventSlave.listen", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventSlave.listen", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">keep_alive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.io_stream_copy.event_emitting", "modulename": "seahorse.game.io_stream_copy", "qualname": "event_emitting", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream_copy.remote_action", "modulename": "seahorse.game.io_stream_copy", "qualname": "remote_action", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream_copy.EventMaster", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventMaster", "kind": "class", "doc": "<p>Singleton for emitting events</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  when trying to initialize more than once</li>\n</ul>\n"}, {"fullname": "seahorse.game.io_stream_copy.EventMaster.__init__", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventMaster.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_clients</span></span>)</span>"}, {"fullname": "seahorse.game.io_stream_copy.EventMaster.get_instance", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventMaster.get_instance", "kind": "function", "doc": "<p>Gets the instance object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n_clients (int, optional):</strong>  the number of clients the instance is supposed to be listening, <em>ignored</em> if already initialized. Defaults to 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_clients</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">io_stream_copy</span><span class=\"o\">.</span><span class=\"n\">EventMaster</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.io_stream_copy.EventMaster.wait_for_identified_client", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventMaster.wait_for_identified_client", "kind": "function", "doc": "<p>Waits for an identified client (a player typically)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  the name of the remote client</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: the client sid</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.io_stream_copy.EventMaster.start", "modulename": "seahorse.game.io_stream_copy", "qualname": "EventMaster.start", "kind": "function", "doc": "<p>Starts an emitting sequence and runs a tasks that embeds\ncalls to <code>EventMaster.__instance.sio.emit()</code></p>\n\n<p>The emitting sequence waits for a number of socketIO connections\nspecified in <code>EventMaster.__instance.n_clients</code>.</p>\n\n<p>If <code>EventMaster.__instance.n_clients==0</code> emits events\nin the void.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>task (Callable[[None],None]):</strong>  task calling <code>EventMaster.sio.emit()</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">listeners</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">io_stream_copy</span><span class=\"o\">.</span><span class=\"n\">EventSlave</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master", "modulename": "seahorse.game.master", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster", "modulename": "seahorse.game.master", "qualname": "GameMaster", "kind": "class", "doc": "<p>A class representing the game master.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the game.</li>\n<li><strong>initial_game_state (GameState):</strong>  The initial state of the game.</li>\n<li><strong>current_game_state (GameState):</strong>  The current state of the game.</li>\n<li><strong>players_iterator (Iterable):</strong>  An iterable for the players, ordered according\nto the playing order. If a list is provided, a cyclic iterator is automatically built.</li>\n<li><strong>log_file (str):</strong>  The name of the log file.</li>\n</ul>\n"}, {"fullname": "seahorse.game.master.GameMaster.__init__", "modulename": "seahorse.game.master", "qualname": "GameMaster.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the GameMaster class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the game.</li>\n<li><strong>initial_game_state (GameState):</strong>  The initial state of the game.</li>\n<li><strong>players_iterator (Iterable[Player]):</strong>  An iterable for the players, ordered according\nto the playing order.</li>\n<li><strong>log_file (str):</strong>  The name of the log file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">initial_game_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">players_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span>)</span>"}, {"fullname": "seahorse.game.master.GameMaster.name", "modulename": "seahorse.game.master", "qualname": "GameMaster.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.current_game_state", "modulename": "seahorse.game.master", "qualname": "GameMaster.current_game_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.initial_game_state", "modulename": "seahorse.game.master", "qualname": "GameMaster.initial_game_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.players", "modulename": "seahorse.game.master", "qualname": "GameMaster.players", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.log_file", "modulename": "seahorse.game.master", "qualname": "GameMaster.log_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.players_iterator", "modulename": "seahorse.game.master", "qualname": "GameMaster.players_iterator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.emitter", "modulename": "seahorse.game.master", "qualname": "GameMaster.emitter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.master.GameMaster.step", "modulename": "seahorse.game.master", "qualname": "GameMaster.step", "kind": "function", "doc": "<p>Calls the next player move.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GamseState : The new game_state.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.master.GameMaster.play_game", "modulename": "seahorse.game.master", "qualname": "GameMaster.play_game", "kind": "function", "doc": "<p>Play the game.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Iterable[Player]: The winner(s) of the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.game.master.GameMaster.record_game", "modulename": "seahorse.game.master", "qualname": "GameMaster.record_game", "kind": "function", "doc": "<p>Starts a game and broadcasts its successive states.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.update_log", "modulename": "seahorse.game.master", "qualname": "GameMaster.update_log", "kind": "function", "doc": "<p>Updates the log file.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.get_name", "modulename": "seahorse.game.master", "qualname": "GameMaster.get_name", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The name of the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.get_game_state", "modulename": "seahorse.game.master", "qualname": "GameMaster.get_game_state", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GameState: The current game state.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.get_json_path", "modulename": "seahorse.game.master", "qualname": "GameMaster.get_json_path", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The path of the log file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.get_winner", "modulename": "seahorse.game.master", "qualname": "GameMaster.get_winner", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Player: The winner(s) of the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.get_scores", "modulename": "seahorse.game.master", "qualname": "GameMaster.get_scores", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict: The scores of the current state.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.master.GameMaster.compute_winner", "modulename": "seahorse.game.master", "qualname": "GameMaster.compute_winner", "kind": "function", "doc": "<p>Computes the winner(s) of the game based on the scores.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (Dict[int, float]):</strong>  The score for each player.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Iterable[Player]: The list of player(s) who won the game.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.representation", "modulename": "seahorse.game.representation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.representation.Representation", "modulename": "seahorse.game.representation", "qualname": "Representation", "kind": "class", "doc": "<p>A class representing a game representation.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>env (dict):</strong>  The dictionary of the current state.</li>\n</ul>\n"}, {"fullname": "seahorse.game.representation.Representation.__init__", "modulename": "seahorse.game.representation", "qualname": "Representation.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the Representation class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env (dict):</strong>  The dictionary of the current state.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span>)</span>"}, {"fullname": "seahorse.game.representation.Representation.env", "modulename": "seahorse.game.representation", "qualname": "Representation.env", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.representation.Representation.get_env", "modulename": "seahorse.game.representation", "qualname": "Representation.get_env", "kind": "function", "doc": "<p>Gets the dictionary of the environment.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: The dictionary of the environment.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.representation.Representation.find", "modulename": "seahorse.game.representation", "qualname": "Representation.find", "kind": "function", "doc": "<p>Finds a key directly in the environment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>to_find (Any):</strong>  The key to find.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The value of the cell.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">to_find</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager", "modulename": "seahorse.game.time_manager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.game.time_manager.TimeMixin", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin", "kind": "class", "doc": "<p>When implemented allows any object to keep track of time</p>\n\n<p>Example usage:</p>\n\n<pre><code>    import time\n    class MyTimedObject(TimeMixin):\n        def __init__(self):\n            self.myattr = 2\n\n        x = MyTimedObject()\n        x.set_time_limit(10)\n        x.start_timer()\n        time.sleep(11)\n        x.myattr=5  # raises ColiseumTimeoutException\n\n</code></pre>\n"}, {"fullname": "seahorse.game.time_manager.TimeMixin.init_timer", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.init_timer", "kind": "function", "doc": "<p>Initializes the time credit of the instance</p>\n\n<p>Doesn't start the timer yet ! Call <code>start_timer()</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_limit (int):</strong>  max time before locking all methods of the class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.TimeMixin.start_timer", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.start_timer", "kind": "function", "doc": "<p>Starts the timer</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AlreadyRunningException:</strong>  when trying to start twice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.TimeMixin.is_running", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.is_running", "kind": "function", "doc": "<p>Is the timer running ?</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: <code>True</code> if the timer is running, <code>False</code> otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.TimeMixin.get_time_limit", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.get_time_limit", "kind": "function", "doc": "<p>Get the limit set in <code>set_time_limit()</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.TimeMixin.get_remaining_time", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.get_remaining_time", "kind": "function", "doc": "<p>Gets the timer's remaining time</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: the remaining time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.TimeMixin.stop_timer", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.stop_timer", "kind": "function", "doc": "<p>Pauses the timer</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotRunningException:</strong>  when the timer isn't running</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: remaining time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.TimeMixin.is_locked", "modulename": "seahorse.game.time_manager", "qualname": "TimeMixin.is_locked", "kind": "function", "doc": "<p>Is the time credit expired ?</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: <code>True</code> if expired <code>False</code> otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.game.time_manager.timed_function", "modulename": "seahorse.game.time_manager", "qualname": "timed_function", "kind": "function", "doc": "<p>Decorator to prevent using a function after object's timeout.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fun (_type_):</strong>  wrapped function</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimerNotInitializedError:</strong>  _description_</li>\n<li><strong>Exception:</strong>  _description_</li>\n<li><strong>ColiseumTimeoutError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Callable[...]: wrapper</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fun</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.player", "modulename": "seahorse.player", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player", "modulename": "seahorse.player.player", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player.Player", "modulename": "seahorse.player.player", "qualname": "Player", "kind": "class", "doc": "<p>A base class representing a player in the game.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>id (int):</strong>  The ID of the player.</li>\n<li><strong>name (str) :</strong>  the name of the player</li>\n</ul>\n", "bases": "seahorse.game.time_manager.TimeMixin"}, {"fullname": "seahorse.player.player.Player.__init__", "modulename": "seahorse.player.player", "qualname": "Player.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the Player class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str, optional):</strong>  The name of the player. Defaults to \"bob\".</li>\n<li><strong>time_limit (float, optional):</strong>  The time limit for the player's moves. Defaults to 1e6.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bob&#39;</span>, </span><span class=\"param\"><span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1000000.0</span></span>)</span>"}, {"fullname": "seahorse.player.player.Player.name", "modulename": "seahorse.player.player", "qualname": "Player.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player.Player.id", "modulename": "seahorse.player.player", "qualname": "Player.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player.Player.play", "modulename": "seahorse.player.player", "qualname": "Player.play", "kind": "function", "doc": "<p>Implements the player's logic and calls compute_action with minimal information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented in the derived class.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The resulting action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.player.player.Player.compute_action", "modulename": "seahorse.player.player", "qualname": "Player.compute_action", "kind": "function", "doc": "<p>Should be dedicated to adversarial search.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>**kwargs:</strong>  Additional arguments.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>MethodNotImplementedError:</strong>  If the method is not implemented in the derived class.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The action to play.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.player.player.Player.get_id", "modulename": "seahorse.player.player", "qualname": "Player.get_id", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The ID of the player.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.player.player.Player.get_name", "modulename": "seahorse.player.player", "qualname": "Player.get_name", "kind": "function", "doc": "<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The name of the player.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.player.player.RemotePlayerProxy", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy", "kind": "class", "doc": "<p>A class representing a remote player proxy.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>mimics (type[Player]):</strong>  The player type to mimic.</li>\n<li><strong>sid:</strong>  The session ID.</li>\n</ul>\n", "bases": "seahorse.game.io_stream.EventSlave"}, {"fullname": "seahorse.player.player.RemotePlayerProxy.__init__", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RemotePlayerProxy class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mimics (type[Player]):</strong>  The player type to mimic.</li>\n<li><strong>*args:</strong>  Additional arguments.</li>\n<li><strong>**kwargs:</strong>  Additional keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mimics</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "seahorse.player.player.RemotePlayerProxy.mimics", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy.mimics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player.RemotePlayerProxy.sid", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy.sid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player.RemotePlayerProxy.play", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy.play", "kind": "function", "doc": "<p>Plays a move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>_:</strong>  The game state (ignored).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The action resulting from the move.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.player.player.RemotePlayerProxy.listen", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy.listen", "kind": "function", "doc": "<p>Listens for events.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Coroutine: A coroutine object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.player.player.RemotePlayerProxy.activate", "modulename": "seahorse.player.player", "qualname": "RemotePlayerProxy.activate", "kind": "function", "doc": "<p>Activates the remote player proxy.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  If the method is called on a remote EventSlave instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.player.player.LocalPlayerProxy", "modulename": "seahorse.player.player", "qualname": "LocalPlayerProxy", "kind": "class", "doc": "<p>A class representing a local player proxy.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>wrapped_player (Player):</strong>  The wrapped player object.</li>\n</ul>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>play(current_state: GameState) -> Action: Plays a move.</p>\n</blockquote>\n", "bases": "seahorse.game.io_stream.EventSlave"}, {"fullname": "seahorse.player.player.LocalPlayerProxy.__init__", "modulename": "seahorse.player.player", "qualname": "LocalPlayerProxy.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the LocalPlayerProxy class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>wrapped_player (Player):</strong>  The player object to wrap.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wrapped_player</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">Player</span></span>)</span>"}, {"fullname": "seahorse.player.player.LocalPlayerProxy.wrapped_player", "modulename": "seahorse.player.player", "qualname": "LocalPlayerProxy.wrapped_player", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.player.player.LocalPlayerProxy.play", "modulename": "seahorse.player.player", "qualname": "LocalPlayerProxy.play", "kind": "function", "doc": "<p>Plays a move.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>current_state (GameState):</strong>  The current game state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Action: The action resulting from the move.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_state</span><span class=\"p\">:</span> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_state</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">seahorse</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.tournament", "modulename": "seahorse.tournament", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament", "modulename": "seahorse.tournament.challonge_tournament", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament", "kind": "class", "doc": "<p>A class to interact with the Challonge tournament platform.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>id_challonge (str):</strong>  The Challonge ID.</li>\n<li><strong>keypass_challonge (str):</strong>  The Challonge API key.</li>\n<li><strong>game_name (str):</strong>  The name of the game.</li>\n<li><strong>log_file (str):</strong>  The log file.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id_challonge (str):</strong>  The Challonge ID.</li>\n<li><strong>keypass_challonge (str):</strong>  The Challonge API key.</li>\n<li><strong>game_name (str):</strong>  The name of the game.</li>\n<li><strong>log_file (str):</strong>  The log file. Default is None.</li>\n</ul>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.__init__", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the ChallongeTournament class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id_challonge (str):</strong>  The Challonge ID.</li>\n<li><strong>keypass_challonge (str):</strong>  The Challonge API key.</li>\n<li><strong>game_name (str):</strong>  The name of the game.</li>\n<li><strong>log_file (str):</strong>  The log file. Default is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">id_challonge</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">keypass_challonge</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">game_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.id_challonge", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.id_challonge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.keypass_challonge", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.keypass_challonge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.game_name", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.game_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.log_file", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.log_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.user", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.user", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.tournament", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.tournament", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.create_tournament", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.create_tournament", "kind": "function", "doc": "<p>Creates a new tournament on Challonge and adds participants from a CSV file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tournament_name (str):</strong>  The name of the tournament.</li>\n<li><strong>tournament_url (str):</strong>  The URL of the tournament.</li>\n<li><strong>csv_file (str):</strong>  The path to the CSV file containing participant names.</li>\n<li><strong>sep (str):</strong>  The delimiter used in the CSV file. Default is \",\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tournament_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tournament_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">csv_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.connect_tournament", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.connect_tournament", "kind": "function", "doc": "<p>Connects to an existing tournament on Challonge.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tournament_name (str):</strong>  The name of the tournament.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ConnectionProblemError:</strong>  If the connection to the tournament fails.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tournament_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.retrieve_scores", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.retrieve_scores", "kind": "function", "doc": "<p>Retrieves the scores from a match.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>match:</strong>  The match object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The scores as a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"k\">match</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.retrieve_winners", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.retrieve_winners", "kind": "function", "doc": "<p>Retrieves the winners from the scores.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scores (str):</strong>  The scores as a string.</li>\n<li><strong>p1:</strong>  The participant object of player 1.</li>\n<li><strong>p2:</strong>  The participant object of player 2.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of winners.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.invert_score", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.invert_score", "kind": "function", "doc": "<p>Inverts the score.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>score (str):</strong>  The score as a string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The inverted score.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.get_participant_winner", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.get_participant_winner", "kind": "function", "doc": "<p>Gets the participant object of the winner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>winner (str):</strong>  The name of the winner.</li>\n<li><strong>p1:</strong>  The participant object of player 1.</li>\n<li><strong>p2:</strong>  The participant object of player 2.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The participant object of the winner.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">winner</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.play_round", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.play_round", "kind": "function", "doc": "<p>Plays a round of the tournament.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name1 (str):</strong>  The name of player 1.</li>\n<li><strong>name2 (str):</strong>  The name of player 2.</li>\n<li><strong>port (int):</strong>  The port number.</li>\n<li><strong>folder_player (str):</strong>  The folder containing the player scripts.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[str, str]: A tuple containing the score and the winner.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">folder_player</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.play_match", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.play_match", "kind": "function", "doc": "<p>Plays a match of the tournament.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>match:</strong>  The match object.</li>\n<li><strong>port (int):</strong>  The port number.</li>\n<li><strong>rounds (int):</strong>  The number of rounds.</li>\n<li><strong>folder_player (str):</strong>  The folder containing the player scripts.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"k\">match</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rounds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">folder_player</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.tournament.challonge_tournament.ChallongeTournament.run", "modulename": "seahorse.tournament.challonge_tournament", "qualname": "ChallongeTournament.run", "kind": "function", "doc": "<p>Runs the tournament.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folder_player (str):</strong>  The folder containing the player scripts.</li>\n<li><strong>rounds (int):</strong>  The number of rounds. Default is 1.</li>\n<li><strong>nb_process (int):</strong>  The number of parallel processes. Default is 2.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NoTournamentFailError:</strong>  If there is no tournament.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folder_player</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">rounds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">nb_process</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "seahorse.utils", "modulename": "seahorse.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions", "modulename": "seahorse.utils.custom_exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.AlreadyRunningError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "AlreadyRunningError", "kind": "class", "doc": "<p>Thrown when trying to start somethin twice</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.AlreadyRunningError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "AlreadyRunningError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Trying to start something twice !&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.AlreadyRunningError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "AlreadyRunningError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.NotRunningError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "NotRunningError", "kind": "class", "doc": "<p>Thrown when trying to stop somethin twice</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.NotRunningError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "NotRunningError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Trying to stop something twice !&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.NotRunningError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "NotRunningError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.ColiseumTimeoutError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ColiseumTimeoutError", "kind": "class", "doc": "<p>Thrown when trying to modify an expired element</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.ColiseumTimeoutError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ColiseumTimeoutError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Trying to modify an expired element ! Time is out !&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.ColiseumTimeoutError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ColiseumTimeoutError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.TimerNotInitializedError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "TimerNotInitializedError", "kind": "class", "doc": "<p>Thrown when trying to use timer utilities before timer initialization</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.TimerNotInitializedError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "TimerNotInitializedError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Timer not initialized.&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.TimerNotInitializedError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "TimerNotInitializedError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.MethodNotImplementedError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "MethodNotImplementedError", "kind": "class", "doc": "<p>Thrown when trying to use a method not implemented</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.MethodNotImplementedError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "MethodNotImplementedError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Method not implemented.&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.MethodNotImplementedError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "MethodNotImplementedError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.ActionNotPermittedError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ActionNotPermittedError", "kind": "class", "doc": "<p>Thrown when trying to generate an action that's not permitted</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.ActionNotPermittedError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ActionNotPermittedError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Action not permitted&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.ActionNotPermittedError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ActionNotPermittedError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.ConnectionProblemError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ConnectionProblemError", "kind": "class", "doc": "<p>Thrown when trying to generate an action that's not permitted</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.ConnectionProblemError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ConnectionProblemError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Connection problem&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.ConnectionProblemError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "ConnectionProblemError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.custom_exceptions.NoTournamentFailError", "modulename": "seahorse.utils.custom_exceptions", "qualname": "NoTournamentFailError", "kind": "class", "doc": "<p>Thrown when trying to generate an action that's not permitted</p>\n", "bases": "builtins.Exception"}, {"fullname": "seahorse.utils.custom_exceptions.NoTournamentFailError.__init__", "modulename": "seahorse.utils.custom_exceptions", "qualname": "NoTournamentFailError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Tournament problem : tournament is none, please connect to an existing tournament or create a tournament&#39;</span></span>)</span>"}, {"fullname": "seahorse.utils.custom_exceptions.NoTournamentFailError.message", "modulename": "seahorse.utils.custom_exceptions", "qualname": "NoTournamentFailError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.logger", "modulename": "seahorse.utils.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.logger.Logger", "modulename": "seahorse.utils.logger", "qualname": "Logger", "kind": "class", "doc": "<p>Custom Logger</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>logger (Logger):</strong>  logger instance</li>\n</ul>\n"}, {"fullname": "seahorse.utils.logger.Logger.__init__", "modulename": "seahorse.utils.logger", "qualname": "Logger.__init__", "kind": "function", "doc": "<p>Constructor for the logger, adds VERBOSE level and a custom formatter</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>void :</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "seahorse.utils.logger.Logger.logger", "modulename": "seahorse.utils.logger", "qualname": "Logger.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seahorse.utils.logger.Logger.debug", "modulename": "seahorse.utils.logger", "qualname": "Logger.debug", "kind": "function", "doc": "<p>debug logging</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (String):</strong>  message to log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.utils.logger.Logger.verbose", "modulename": "seahorse.utils.logger", "qualname": "Logger.verbose", "kind": "function", "doc": "<p>verbose logging</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (String):</strong>  message to log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.utils.logger.Logger.info", "modulename": "seahorse.utils.logger", "qualname": "Logger.info", "kind": "function", "doc": "<p>info logging</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (String):</strong>  message to log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.utils.logger.Logger.warning", "modulename": "seahorse.utils.logger", "qualname": "Logger.warning", "kind": "function", "doc": "<p>warning logging</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (String):</strong>  message to log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.utils.logger.Logger.error", "modulename": "seahorse.utils.logger", "qualname": "Logger.error", "kind": "function", "doc": "<p>error logging</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (String):</strong>  message to log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seahorse.utils.logger.Logger.critical", "modulename": "seahorse.utils.logger", "qualname": "Logger.critical", "kind": "function", "doc": "<p>critical error logging</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (String):</strong>  message to log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();